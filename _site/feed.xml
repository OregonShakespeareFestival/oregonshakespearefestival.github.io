<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oregon Shakespeare Festival Tessitura and E-Commerce Design</title>
    <description>This is designed to be a living document representing the Tessitura SiteCore E-Commerce Design for the Oregon Shakespeare Festival Installed at DataCenter West</description>
    <link>http://127.0.0.1:4000/</link>
    <atom:link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 30 Jul 2014 08:35:05 -0700</pubDate>
    <lastBuildDate>Wed, 30 Jul 2014 08:35:05 -0700</lastBuildDate>
    <generator>Jekyll v2.1.1</generator>
    
      <item>
        <title>Nginx+ Configuration</title>
        <description>&lt;h3 id=&quot;nginx&quot;&gt;Nginx+&lt;/h3&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;nginx-roles&quot;&gt;Nginx+ Roles&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Production Load Balancer&lt;/li&gt;
  &lt;li&gt;Development Load Balancer&lt;/li&gt;
  &lt;li&gt;Reverse Proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nginx-config&quot;&gt;Nginx Config&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;From this point on we will deal primarily with files located in nginx+’s default configuration directory &lt;code&gt;/etc/nginx/&lt;/code&gt;
In the main config file &lt;code&gt;nginx.conf&lt;/code&gt; there are several important options to set.&lt;/p&gt;

&lt;h4 id=&quot;worker-threads&quot;&gt;Worker Threads&lt;/h4&gt;
&lt;p&gt;To scale nginx we increased the number of worker threads with by setting &lt;code&gt;worker_processes  4;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;logging-levels&quot;&gt;Logging Levels&lt;/h4&gt;
&lt;p&gt;Additional logging levels can be enabled by appending &lt;code&gt;notice&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt; etc to the line &lt;code&gt;error_log /var/log/nginx/error.log;&lt;/code&gt;, for example: &lt;code&gt;error_log /var/log/nginx/error.log notice;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;additional-configs&quot;&gt;Additional Configs&lt;/h4&gt;
&lt;p&gt;Finally we end our configuration with &lt;code&gt;include /etc/nginx/conf.d/*.conf&lt;/code&gt; which allows us to separate our webserver configs.&lt;/p&gt;

&lt;h3 id=&quot;load-balancing&quot;&gt;Load Balancing&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;For load balancing upstream zones must be defined that adhere to the following pattern&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream &amp;lt;zone-name&amp;gt;
{
    zone &amp;lt;zone-name&amp;gt; &amp;lt;memory-allocation&amp;gt;;
    &amp;lt;additional-options&amp;gt;;
    &amp;lt;loadbalancing-style&amp;gt;;
    server &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;additional-options&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example ripped from one of our test environments uses a least number of connections load balancing style and uses health checks to remove overloaded servers from the load balancing pool&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream wwwd-backend
{
        zone wwwd-backend 128k;
        ip_hash;
        least_conn;
        server 172.16.20.26:80 max_fails=5 fail_timeout=10s slow_start=30s;
        server 172.16.20.27:80 max_fails=5 fail_timeout=10s slow_start=30s;

        keepalive 32;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;upstream-options&quot;&gt;Upstream Options&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ip_hash&lt;/code&gt; enables sticky sessions so a patron will stick with a single server as the browse the site.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;least_conn&lt;/code&gt; is the load balancing style that nginx employs when selecting webservers to route trafic to.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;max_fails&lt;/code&gt; is the threshold of concurrent failed requests that nginx uses to determine server health.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fail_timeout&lt;/code&gt; is the interval that nginx will wait before it begins probing a webserver again.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;slow_start&lt;/code&gt; is the interval during which nginx will route a reduced amount of traffic to the webserver after it passes health checks.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;keepalive&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;status-pages&quot;&gt;Status Pages&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Two nginx status pages have been defined in status.conf and nginx-status.conf&lt;/p&gt;

&lt;h3 id=&quot;zabbix-monitoring&quot;&gt;Zabbix Monitoring&lt;/h3&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;puppet-deployment&quot;&gt;Puppet Deployment&lt;/h3&gt;
&lt;hr /&gt;

</description>
        <pubDate>Tue, 29 Jul 2014 08:30:52 -0700</pubDate>
        <link>http://127.0.0.1:4000/network/2014/07/29/Nginx+/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/network/2014/07/29/Nginx+/</guid>
        
        
        <category>network</category>
        
      </item>
    
      <item>
        <title>How the Web Works</title>
        <description>&lt;h3 id=&quot;how-the-web-works--at-the-oregon-shakespeare-festival-at-least&quot;&gt;How the web works.  At the Oregon Shakespeare Festival at least…&lt;/h3&gt;
&lt;p&gt;=======================================================================&lt;/p&gt;

&lt;p&gt;Perhaps you’ve never asked yourself how organizations like the Oregon Shakespeare Festival scale their web infrastructure to accomodate heavy customer load while still providing a rich user experience and speedy check out.  Maybe you should!  A number of incredibly interesting web technologies are out there every day helping you make the purchases you need during member pre-sale events, big thanksgiving day sales, and online events.&lt;/p&gt;

&lt;p&gt;This is the story of the Oregon Shakespeare Festival’s website www.osfashland.org and the improvements made to it’s design to help handle lots of customers online.&lt;/p&gt;

&lt;h3 id=&quot;the-tech&quot;&gt;The Tech&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Tons of cool technology is involved in making osfashland.org ticket sales a reality.&lt;/p&gt;

&lt;p&gt;Amongst the tech is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gatling Stress Tests&lt;/li&gt;
  &lt;li&gt;CloudFlare&lt;/li&gt;
  &lt;li&gt;NGINX+&lt;/li&gt;
  &lt;li&gt;Dell VRTX Converged Infrastructure&lt;/li&gt;
  &lt;li&gt;vmWare vSphere 5&lt;/li&gt;
  &lt;li&gt;CentOS&lt;/li&gt;
  &lt;li&gt;Puppet&lt;/li&gt;
  &lt;li&gt;Chocolatey&lt;/li&gt;
  &lt;li&gt;PFSense&lt;/li&gt;
  &lt;li&gt;NewRelic&lt;/li&gt;
  &lt;li&gt;ASP.NET&lt;/li&gt;
  &lt;li&gt;SiteCore&lt;/li&gt;
  &lt;li&gt;Closure Compile&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-web-sales-go&quot;&gt;How web sales go&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;In the figure below all of the components involved in selling a ticket on the web are outlined at a high level. Each component plays an important part in the scalability and redundancy that protects our user experience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/webstack-architechture.png&quot; alt=&quot;WebArchitecture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;our-patronage&quot;&gt;Our patronage&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;We know our patronage to be a diverse group of people using many different browsers out on the web.  At writing this article a 6 month sample of our users shows Safari on OS X to be the most popular browser at 39 % with Chrome and Internet Explorer following close behind.&lt;/p&gt;

&lt;p&gt;Operating System Demographics put Windows first at 38.67% of market with iOS trailing just behind at 27.43%.  Much to our chagrin the mobile experience while improved is still lacking and will be the focus of next years preparations for the 2016 season pre-sale.&lt;/p&gt;

&lt;h3 id=&quot;cloudflare&quot;&gt;CloudFlare&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;CloudFlare is a “Cloud Based” web optimization platform.  It not only acts as reverse proxy but also does inline content acceleration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache&lt;/li&gt;
  &lt;li&gt;Auto-minification&lt;/li&gt;
  &lt;li&gt;Image scaling per-device&lt;/li&gt;
  &lt;li&gt;DDOS-Protection&lt;/li&gt;
  &lt;li&gt;Site Offline Message&lt;/li&gt;
  &lt;li&gt;Fail Whale Pages ( Still needs chosen and done )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are just a few of the things that we benefit from by virtue of the fact that we have cloudflare.&lt;/p&gt;

&lt;h4 id=&quot;recent-testing&quot;&gt;Recent Testing&lt;/h4&gt;
&lt;p&gt;Recent internal testing has revealed the CloudFlare reduces load on our web servers by &lt;strong&gt;15-20%&lt;/strong&gt; during stress tests with Gatling tool.  This was tested loading 250 users across the farm at 1 user every two seconds.  Page load times were the most common metric used in measuring performance improvement.&lt;/p&gt;

&lt;h4 id=&quot;questions-about-cloudflare&quot;&gt;Questions about CloudFlare&lt;/h4&gt;
&lt;p&gt;Due to the nature of the way CloudFlare intercepts and modifys traffic we have wondered if we should leverage CloudFlare’s ability to pass extra information about the patron to NGINX.  NGINX may or may not be able to use this information to better maintain client state.&lt;/p&gt;

&lt;p&gt;This is well documented here.&lt;/p&gt;

&lt;p&gt;https://support.cloudflare.com/hc/en-us/articles/200504045-Using-CloudFlare-with-your-API&lt;/p&gt;

&lt;h3 id=&quot;datacenter-west-colocation&quot;&gt;DataCenter West Colocation&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;DataCenter West as a facility was chosen largely because of it’s peer exhchange.  The peer exchange is the direct connection of all the major bandwidth carriers in Southern Oregon.  This allows the best opportunity to stay online selling tickets in our region.&lt;/p&gt;

&lt;h4 id=&quot;issues-with-datacenter-west&quot;&gt;Issues with DataCenter West&lt;/h4&gt;
&lt;p&gt;On July 28, 2014 at approximately 4:18 Data Center West experienced a single phase power loss.  This creates an unbalanced load condition when the currents on the three live wires of a three-phase system are not equal or are not at an exact 120° phase angle, the power-loss is greater than for a perfectly balanced system.&lt;/p&gt;

&lt;p&gt;The Dell VRTX chassis at the site experienced partial power loss.  This resulted in the network management controller losing part of it’s configuration.  This was either due to the configuration not being saved to nvram or a problem with the management controller firmware.&lt;/p&gt;

&lt;h3 id=&quot;pfsense-firewall-service&quot;&gt;PFSense Firewall Service&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;PFSense – a firewall distribution based in FreeBSD with a great web interface was chosen to perform firewall services for the e-commerce system largely due to it’s low cost, small attack surface, and agility.  PFSense is well support on the vSphere platform.&lt;/p&gt;

&lt;h4 id=&quot;the-next-design-starship&quot;&gt;The Next Design Starship&lt;/h4&gt;

&lt;p&gt;The next design of the DataCenter west rack will include another out of band firewall to hold up SSL VPN between sites.  This will be advantageous in the event that Hunter Fails or Human Intervention is required.&lt;/p&gt;

&lt;p&gt;The first candidate is:&lt;/p&gt;

&lt;p&gt;http://store.netgate.com/Netgate-FW-7541-1U-Rack-Mount-System-BTO-P1903.aspx&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/starship.jpg&quot; alt=&quot;starship&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;NGINX is a reverse proxy first, load balancer second, and a web server third.  In the OSF implementation NGINX was selected due to it’s ability to terminate SSL and act as a load balancer.&lt;/p&gt;

&lt;p&gt;NGINX provides load balancing for both the SiteCore delivery server and Jacobson Consulting Associates select your own seat.&lt;/p&gt;

&lt;p&gt;NGINX was originally slated for load balancing of the CRM/ERP service layer ( in this case Tessitura SOAP ) but was scrapped due to the integration of the SOAP services on the web server using a binding to localhost.&lt;/p&gt;

&lt;p&gt;SSL is also terminated at the reverse proxy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any request arriving in the clear is rewritten to SSL and the backend remains http.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;rewrite        ^ https://$server_name$request_uri? permanent;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another article has a detailed brief on the NGINX configuration available from the parent site.&lt;/p&gt;

&lt;h3 id=&quot;sitecore-delivery-servers&quot;&gt;SiteCore Delivery servers&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;OSF’s web server configuration is quite unique in that three distinctly different applications are required to run to make the site go.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OSFAshland SiteCore Application&lt;/li&gt;
  &lt;li&gt;Select your own seat service&lt;/li&gt;
  &lt;li&gt;Tessitura Service Layer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tessitura-service-layer&quot;&gt;Tessitura Service Layer&lt;/h4&gt;
&lt;p&gt;The tessitura service layer is unique to OSF’s sitecore deployment.  This is representative of the soap services needed to integrate with the ERP/CRM Tessitura.  Rather than go parallel with the Tessitura service layer we elected to use web gardens on the web server, employ the ASP.NET state service, and parallelize threads on each web server.&lt;/p&gt;

&lt;p&gt;Additionally the queue lengths on the application workers were also increased from their default setting of 1000 to 5000.&lt;/p&gt;

&lt;h4 id=&quot;select-your-own-seat-service&quot;&gt;Select your own seat service&lt;/h4&gt;
&lt;p&gt;The select your own seat service by Jacobson Consulting and Associates uses the Tessitura service layer, javascript, and SVG objects to facilitate the generation of a seat map.  The service also has logic in it to evaluate membership levels.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Completely anecdoteally we have never been able to load test this service since it is so javascript heavy.  We can do functional tests in Selenium.  We also have not validated that this is ‘A’ OKAY with web gardens.  Several calls have pointed to angular JS and an excellent candidate to rewrite this if we ever want to completely re-write the UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sitecore-application&quot;&gt;SiteCore Application&lt;/h4&gt;
&lt;p&gt;The SiteCore application configuration is largely in the web.config files.  SiteCore itself does not support web gardens.&lt;/p&gt;

&lt;p&gt;SiteCore’s caches per delivery server have been optimized according to the following guide:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://sdn.sitecore.net/Articles/Administration/Sitecore%20Performance/Optimizing%20Sitecore%206%20and%20later/Optimizing%20Performance%20in%20Sitecore.aspx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sitecore instance on each web server is connected to the set of tessitura services on it’s own web node.&lt;/p&gt;

&lt;h4 id=&quot;tessitura-database-server&quot;&gt;Tessitura Database Server&lt;/h4&gt;

</description>
        <pubDate>Tue, 29 Jul 2014 01:47:30 -0700</pubDate>
        <link>http://127.0.0.1:4000/website/2014/07/29/howthewebworks/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/website/2014/07/29/howthewebworks/</guid>
        
        
        <category>website</category>
        
      </item>
    
      <item>
        <title>DataCenter West Networking</title>
        <description>&lt;h1 id=&quot;networking-at-datacenter-west&quot;&gt;Networking at DataCenter West&lt;/h1&gt;

&lt;p&gt;The network infrastructure connecting DataCenter West and the Oregon Shakespeare Festival is quite complex.  In order to fully undertand the reader should be familiar with the concept of
  *vlans
  *L2 lans
  *NAT
  *embedded virtual networks
  *vmWare vSphere networks
  *PFSense&lt;/p&gt;

&lt;h2 id=&quot;intersite-diagram&quot;&gt;Intersite Diagram&lt;/h2&gt;

&lt;p&gt;The intersite routing is achieved through a number of technologies.  Ashland -&amp;gt; Routes to DataCenter West via a L2 leased dark fiber.  The dark fiber is
100mbps sync connection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/intersite-networking.png&quot; alt=&quot;IntersiteDiagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ashland-side&quot;&gt;Ashland Side&lt;/h3&gt;

&lt;p&gt;The Ashland side of the transacation is a Cat6509E bringing the network in through an interface on our fiber blade.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface GigabitEthernet1/24
description new-afn-uplink
switchport
switchport access vlan 3
switchport trunk encapsulation dot1q
switchport trunk native vlan 450
switchport trunk allowed vlan 450,664,687
switchport mode trunk
no cdp enable
spanning-tree portfast edge
spanning-tree bpdufilter enable
spanning-tree bpduguard enable
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further the routes to the 172.16.20.0/24 subnet are held in place by a static route ( for now until OSPF and DMVPN can be implemented )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip route 172.16.20.0 255.255.255.0 172.16.4.10 tag 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As all intervlans at OSF use the Cat6509E at Ashland as their gateway of last resort this facilitates intersite.&lt;/p&gt;

&lt;h3 id=&quot;medford-side&quot;&gt;Medford Side&lt;/h3&gt;

&lt;p&gt;On the Medford side of the transaction the L2 lan terminates in an Adtran switch and reaches the Dell-VRTX chassis via a cross connect terminated in gi0/1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two devices 1 physical and 1 virtual are involved in the handoff.&lt;/li&gt;
  &lt;li&gt;Device #1 – A Dell Embedded Network Management Module&lt;/li&gt;
  &lt;li&gt;Device #2 – A Virtualized PFSense firewall&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Dell embedded switch module reachable at 172.16.20.47 and configurable from inside OSF over http uses standard VLAN terminology.  The cables in gig 0/1 and 0/2 bring the two networks into the chassis
as untagged networks which are then in turn tagged to the blades inside the chassis.&lt;/p&gt;

&lt;p&gt;Each blade running vmWare ESXi gets the following mapped to it’s 1/1 and 2/1 inteface respectively.&lt;/p&gt;

&lt;p&gt;All unconfigured ports are simply in VLAN1 the 172.16.20.0/24 subnet to faclitate an easy physical direct connection to the DCWest RFC1918 subnet.&lt;/p&gt;

&lt;h5 id=&quot;vlan1-configuration-example&quot;&gt;VLAN1 Configuration Example&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/static/dell-network-vlan1.png&quot; alt=&quot;vlan1&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;vlan3-configuration-example&quot;&gt;VLAN3 Configuration Example&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/static/dell-network-vlan3.png&quot; alt=&quot;vlan3&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;vlan687-configuration-example&quot;&gt;VLAN687 Configuration Example&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/static/dell-network-vlan687.png&quot; alt=&quot;vlan687&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-vmware&quot;&gt;In vmWare&lt;/h3&gt;

&lt;p&gt;The VRTX Chassis runs an embedded instance of vSphere server.  The vSphere server is the vmWare virtual appliance flavor based on the SLES jeost server OS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/vsphere-network-config.png&quot; alt=&quot;vSwitch0&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the above diagram you can see a single simple vSwitch connected to vmNic0.  vmNic0 is mapped to the DellVRTX blade interface gig 1/1 and 2/1 respectively.  This is a trunk port with 1 as the native vlan and 3 and 687 as tagged.  Together this plus PFSense facilitate all routing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pfsense-configuration&quot;&gt;PFSense Configuration&lt;/h3&gt;

&lt;p&gt;The PFSense configuration is very simple.  Each Public IP in VLAN 3 ( DataCenter West 198.251.115.96/27 ) is mapped to an IP in the 172.16.20.0/24 space using a virtual IP and a 1:1 NAT rule.&lt;/p&gt;

&lt;p&gt;The virtual firewall also has three interfaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LAN : 172.16.20.10&lt;/li&gt;
  &lt;li&gt;WAN : 198.251.115.98&lt;/li&gt;
  &lt;li&gt;OSF ( OPT1 ) : 172.16.4.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/pfinterfaces.png&quot; alt=&quot;pfinterfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The NAT rules below dictate what “private ip” or piece of the 24 bit RFC 1918 allocation will be mapped to the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/pfonetoone.png&quot; alt=&quot;pfonetoone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Firewall rules in the below block from the WAN interface determine what traffic will be passed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note : The firewall rules are pointed at the private IP because they take place post network address translation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/pfrules.png&quot; alt=&quot;pfrules&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Though not networking related you may note that all HTTP/HTTPs traffic are passed by a single IP.  In this case an NGINX load balancer.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 29 Jul 2014 01:47:30 -0700</pubDate>
        <link>http://127.0.0.1:4000/network/2014/07/29/Network-Diagram/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/network/2014/07/29/Network-Diagram/</guid>
        
        
        <category>network</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Jul 2014 01:39:30 -0700</pubDate>
        <link>http://127.0.0.1:4000/jekyll/update/2014/07/29/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/jekyll/update/2014/07/29/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
